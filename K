def label_propagation(grafo, label, corte):
	'''Recibe un grafo, un diccionario llamado label y un valor corte. Esta
	función realiza el algoritmo label propagation sobre label hasta que este se
	termina (en caso de que corte sea cero) o hasta que se llegue al número de 
	iteración indicado por corte. '''
	frecuencia = {}
	i = 0
	max_freq = 0
	vertice_max_freq = None
	iguales = True
	aux = {}
	vertice_min_label = None
	min_label = 6450 #para tomar como valor maximo, dsp podemos poner la cant de vertices + 1
	for clave, valor in label.items():
		for adyacente in grafo.adyacentes(clave):
			if not adyacente in frecuencia:
				frecuencia[adyacente] = 0
			frecuencia[adyacente] += 1
		for clave2, valor2 in frecuencia.items():
			if valor2 not in aux:
				aux[valor2] = clave2
		referente = valor2
		for frec in aux:
			if frec != referente:
				iguales = False
		if iguales:
			for adyacente in grafo.adyacentes(clave):
				if label[adyacente] < min_label:
					min_label = label[adyacente]
					vertice_min_label = adyacente
			if vertice_min_label:
				label[clave] = label[vertice_min_label]
				vertice_min_label = None
		else:
			for clave2, valor2 in aux.items():
				if clave2 > max_freq:
					max_freq = clave2
					vertice_max_freq = valor2
			if vertice_max_freq:
				label[clave] = label[vertice_max_freq]
				vertice_max_freq = None
				frecuencia = {}
				max_freq = 0
		iguales = True
		if corte:
			if i == corte:
				break
		i += 1